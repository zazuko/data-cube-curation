# TODO: get rid of base and provide from env variables
@base <http://localhost:5678/> .

@prefix api: <https://rdf-cube-curation.described.at/> .
@prefix hydra: <http://www.w3.org/ns/hydra/core#> .
@prefix code: <https://code.described.at/> .
@prefix hydra-box: <http://hydra-box.org/schema/> .
@prefix schema: <http://schema.org/> .

## Entrypoint

<api> a hydra:ApiDocumentation ;
  hydra:entrypoint <> ;
  hydra:supportedClass
    api:Entrypoint ,
    api:Installation ,
    api:DataCubeProjects ,
    api:DataCubeProject ,
    api:DataCubeSource ,
    api:DataCubeSourcesCollection ,
    api:DataCubeSourceColumn .

api:Installation a hydra:Class ;
  hydra:title "Data cube curation API setup" ;
  hydra:supportedOperation [
    a hydra-box:View, api:InstallOperation ;
    hydra:method "POST" ;
    hydra:title "Start installation" ;
    code:implementedBy [
      a hydra-box:middlewareChain ;
      code:arguments (
        [
          a hydra-box:SparqlUpdate ;
          hydra-box:source <file:hydra/install.ru>
        ]
        [
          a code:EcmaScript ;
          code:link <file:lib/installation/setResponseHeaders#default>
        ]
      )
    ]
  ].

api:Entrypoint a hydra:Class ;
  hydra:title "The root of the API" ;
  hydra:supportedOperation api:EntrypointGetOperation .

api:EntrypointGetOperation
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:title "Get the entrypoint resource" ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source
      <file:hydra/entrypoint/get.sparql> ,
      <file:hydra/entrypoint/installation.get.rq>
  ] .

## End Entrypoint

## Projects

api:DataCubeProjects a hydra:Class ;
  hydra:title "Data Cube Projects" ;
  hydra:supportedOperation
    api:CreateDataCubeProject ,
    api:GetDataCubeProjects .

api:GetDataCubeProjects
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get all projects" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source <file:hydra/projects/get.rq>, <file:hydra/projects/get.manages-block.rq>
  ] .

api:CreateDataCubeProject
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:title "Design an RDF data cube" ;
  hydra:method "POST" ;
  hydra:returns api:DataCubeProject ;
  hydra:expects api:DataCubeProject ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project/create#initLocals>
      ]
      [
        a hydra-box:SparqlUpdate ;
        hydra-box:source <file:hydra/project/create.ru>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project/create#setResponse>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project/get.rq>
      ]
    )
  ] ;
  <http://hydra-box.org/schema/variables>
  [
    hydra:mapping
    [
      a hydra:IriTemplateMapping ;
      hydra:property schema:name ;
      hydra:variable "projectName"
    ]
  ] .

## /End Projects

## Project

@prefix api-projects: <https://rdf-cube-curation.described.at/DataCubeProject/> .

api:DataCubeProject
  a hydra:Class ;
  hydra:title "A data cube mapping project" ;
  hydra:supportedOperation
    api:GetDataCubeProject ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Project name" ;
      hydra:readable true ;
      hydra:writeable true
    ] ,
    [
      hydra:property api-projects:sources ;
      hydra:title "Data cube sources" ;
      hydra:writeable false
    ] .

api-projects:sources
  hydra:supportedOperation api-projects:PostSource .

api:GetDataCubeProject
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get a project" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source <file:hydra/project/get.rq>
  ] .

api-projects:PostSource
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "POST" ;
  hydra:title "Create a data cube source" ;
  hydra:returns api:DataCubeProject ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source#initNew>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source/create#processCsv>
      ]
      [
        a hydra-box:SparqlUpdate ;
        hydra-box:source <file:hydra/project-source/create.ru>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source/create#setResponse>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source/get.rq>, <file:hydra/project-source/get.columns.rq>
      ]
    )
  ] .

## /End Project

## DataCubeSource

@prefix api-source: <https://rdf-cube-curation.described.at/DataCubeSource/> .

api:DataCubeSourcesCollection
  a hydra:Class ;
  hydra:supportedOperation
    api-projects:PostSource .

api:DataCubeSource
  a hydra:Class ;
  hydra:supportedOperation
    api:GetDataCubeSource ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Source name" ;
      hydra:readable true ;
      hydra:writeable true
    ] ,
    [
      hydra:property api-source:columns ;
      hydra:title "Source columns" ;
      hydra:writeable false
    ] .

api:GetDataCubeSource
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get project source" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source#initExisting>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source/get.rq>, <file:hydra/project-source/get.columns.rq>
      ]
    )
  ] .

## /End DataCubeSource

## Column

@prefix api-column: <https://rdf-cube-curation.described.at/DataCubeSourceColumn/> .

api:DataCubeSourceColumn
  a hydra:Class ;
  hydra:title "Source column" ;
  hydra:supportedProperty
    [
      hydra:property api-column:title ;
      hydra:title "Column heading"
    ] ,
    [
      hydra:property api-column:mapped ;
      hydra:title "Mapped" ;
      hydra:description "Indicates that the column is used in a dimension or measure."
    ].

## /End Column

## Express hooks

<> a api:Entrypoint, api:Installation .
<projects> a api:DataCubeProjects .

# TODO: this shows how the route definition will often be split into a template and express route. only template should be necessary
</project/:projectId> a api:DataCubeProject .
</project/:projectId/sources> a api:DataCubeSourcesCollection .
</project/:projectId/source/:sourceId> a api:DataCubeSource .
[ ]
  a hydra:IriTemplate ;
  hydra:template "/project/{projectId}{/rest}" ;
  hydra:mapping
  [
    a hydra:IriTemplateMapping ;
    hydra:variable "projectId" ;
    hydra:property <http://schema.org/id>
  ].
[ ]
  a hydra:IriTemplate ;
  hydra:template "/project/{projectId}/source/{sourceId}" ;
  hydra:mapping
  [
    a hydra:IriTemplateMapping ;
    hydra:variable "projectId" ;
    hydra:property <http://schema.org/id>
  ] ,
  [
    a hydra:IriTemplateMapping ;
    hydra:variable "sourceId" ;
    hydra:property <http://schema.org/sourceId>
  ] .
