# TODO: get rid of base and provide from env variables
@base <http://localhost:5678/> .

@prefix api: <https://rdf-cube-curation.described.at/api/> .
@prefix dataCube: <https://rdf-cube-curation.described.at/> .
@prefix hydra: <http://www.w3.org/ns/hydra/core#> .
@prefix code: <https://code.described.at/> .
@prefix hydra-box: <http://hydra-box.org/schema/> .
@prefix schema: <http://schema.org/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

## Entrypoint

<api> a hydra:ApiDocumentation ;
  hydra:entrypoint <> ;
  hydra:supportedClass
    api:Entrypoint ,
    api:Projects ,
    dataCube:Project ,
    dataCube:Source ,
    dataCube:Table ,
    dataCube:FactTable ,
    api:Sources ,
    dataCube:Column ,
    api:Error ,
    api:ProjectPlaceholder ,
    dataCube:ColumnAttribute ,
    dataCube:Attribute ,
    api:AttributeCollection ,
    api:TableCollection.

api:Entrypoint a hydra:Class ;
  hydra:title "The root of the API" ;
  hydra:supportedOperation api:EntrypointGetOperation ;
  hydra:supportedProperty
    [
      hydra:property api:projects ;
      hydra:title "Projects" ;
      hydra:readable true ;
      hydra:writeable false
    ].

api:EntrypointGetOperation
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:title "Get the entrypoint resource" ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source
      <file:hydra/entrypoint/get.sparql>
  ] .

api:projects a hydra:Link .

## End Entrypoint

## Projects

api:Projects a hydra:Class ;
  hydra:title "Data Cube Projects" ;
  hydra:supportedOperation
    api:CreateProject ,
    api:GetDataCubeProjects .

api:GetDataCubeProjects
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get all projects" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source <file:hydra/projects/get.rq>, <file:hydra/projects/get.manages-block.rq>
  ] .

api:CreateProject
  a hydra:SupportedOperation, hydra-box:View, schema:CreateAction ;
  hydra:title "Design an RDF data cube" ;
  hydra:method "POST" ;
  hydra:returns dataCube:Project ;
  hydra:expects dataCube:Project ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project#create>
      ]
    )
  ] ;
  hydra-box:variables
  [
    hydra:mapping
    [
      a hydra:IriTemplateMapping ;
      hydra:property schema:name ;
      hydra:variable "projectName"
    ]
  ] .

api:ReplaceProject
  a hydra:SupportedOperation, hydra-box:View, schema:CreateAction ;
  hydra:title "Design an RDF data cube" ;
  hydra:method "PUT" ;
  hydra:returns dataCube:Project ;
  hydra:expects dataCube:Project ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project#createOrUpdate>
      ]
    )
  ] ;
  hydra-box:variables
  [
    hydra:mapping
    [
      a hydra:IriTemplateMapping ;
      hydra:property schema:name ;
      hydra:variable "projectName"
    ]
  ] .

## /End Projects

## Project

api:ProjectPlaceholder
  a hydra:Class ;
  hydra:supportedProperty
    [
      hydra:property api:project
    ] .

api:project
  hydra:supportedOperation
    api:ReplaceProject .

dataCube:Project
  a hydra:Class ;
  hydra:title "A data cube mapping project" ;
  hydra:supportedOperation
    api:GetProject ,
    api:DeleteProject ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Project name" ;
      hydra:readable true ;
      hydra:writeable true
    ] ,
    [
      hydra:property api:sources ;
      hydra:title "Data cube sources" ;
      hydra:writeable false
    ] ,
    [
      hydra:property dataCube:factTable ;
      hydra:title "The project's output Fact Table" ;
      hydra:writeable false
    ] ,
    [
      hydra:property api:tables ;
      hydra:title "The project's tables" ;
      hydra:writeable false
    ] .

api:tables
  a hydra:Link ;
  rdfs:range api:TableCollection ;
  hydra:supportedOperation
    api:CreateDimensionTable ,
    api:PostFactTable ,
    api:GetTables .

dataCube:factTable
  a hydra:Link ;
  rdfs:range dataCube:FactTable ;
  hydra:supportedOperation
    api:CreateFactTable .

api:sources
  a hydra:Link ;
  hydra:supportedOperation api:AddSource .

api:DeleteProject
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "DELETE" ;
  hydra:title "Deletes a project" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project#archive>
      ]
     )
   ] .

api:GetProject
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get a project" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project/get#get>
      ]
    )
  ] .

api:AddSource
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "POST" ;
  hydra:title "Create a data cube source" ;
  hydra:description "Select a comma-separated values file" ;
  hydra:returns dataCube:Project ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project-source/create#parseCsv>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project-source/create#createSourceHandler>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source/get.rq>, <file:hydra/project-source/get.columns.rq>
      ]
    )
  ] .

api:GetProjectSources
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get the data cube source" ;
  hydra:returns api:Sources ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project#initExisting>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source-collection/get.rq>, <file:hydra/project-source-collection/get.manages-block.rq>
      ]
    )
  ] .

## /End Project

## DataCubeSource

api:Sources
  a hydra:Class ;
  hydra:supportedOperation
    api:GetProjectSources ,
    api:AddSource .

dataCube:Source
  a hydra:Class ;
  hydra:supportedOperation
    api:GetDataCubeSource ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Name" ;
      hydra:readable true ;
      hydra:writeable true
    ] ,
    [
      hydra:property api:columns ;
      hydra:title "Columns" ;
      hydra:writeable false
    ] ,
    [
      hydra:property dataCube:project ;
      hydra:title "Project" ;
      hydra:description "The project this source belongs to" ;
      hydra:writeable false
    ] ,
    [
      hydra:property api:sample ;
      hydra:title "Collection of sample row data" ;
      hydra:writeable false
    ] .

api:sample a hydra:Link ;
  hydra:supportedOperation _:GetSourceSample .

_:GetSourceSample
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Sample source rows" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project-source/sample#getSampleRows>
      ]
    )
  ] .

dataCube:project a hydra:Link .
api:csvwMetadata a hydra:Link ;
  hydra:supportedOperation api:GetCsvwMetadata .

api:GetDataCubeSource
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get project source" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project-source#initExisting>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source/get.rq>, <file:hydra/project-source/get.columns.rq>
      ]
    )
  ] .

api:GetCsvwMetadata
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table/csvw#get>
      ]
    )
  ] .

## /End DataCubeSource

## Column

dataCube:Column
  a hydra:Class ;
  hydra:title "Source column" ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Column heading"
    ] ,
    [
      hydra:property dataCube:mapped ;
      hydra:title "Mapped" ;
      hydra:description "Indicates that the column is used in a dimension or measure."
    ].

## /End Column

## Table

dataCube:FactTable
  rdfs:subClassOf dataCube:Table ;
  hydra:title "Project's table" ;
  hydra:supportedOperation
    api:GetFactTable .

dataCube:DimensionTable
  rdfs:subClassOf dataCube:Table ;
  hydra:title "Project's dimension table" ;
  hydra:supportedProperty
    [
      hydra:property dataCube:identifierTemplate ;
      hydra:title "Table identifier" ;
      hydra:description "A URL Template which can contain column names as variables" ;
      hydra:required true
    ] .

dataCube:Table
  a hydra:Class ;
  hydra:title "A table" ;
  hydra:description "Models the output of transforming source data into the data cube structure" ;
  hydra:supportedProperty
    [
      hydra:property dataCube:project ;
      hydra:title "The project which contains this fact table" ;
      hydra:writeable false
    ] ,
    [
      hydra:property schema:name ;
      hydra:title "Table name" ;
      hydra:required true
    ] ,
    [
      hydra:property dataCube:source ;
      hydra:title "The tables's source" ;
      hydra:required true
    ] ,
    [
      hydra:property api:csvwMetadata ;
      hydra:title "CVSW mapping document for this table" ;
      hydra:writeable false
    ] ,
    [
      hydra:property api:attributes ;
      hydra:title "Table's attributes mapped from it's source";
      hydra:writeable false
    ] ,
    [
      hydra:property api:preview ;
      hydra:title "Preview the table's mapping";
      hydra:writeable false
    ] ;
  hydra:supportedOperation
    api:GetTable .

api:preview a hydra:Link ;
  hydra:supportedOperation api:GetPreview .

api:GetPreview a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Runs the table's mapping on sample source data and returns the resulting triples" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table/preview#parseSample>
      ]
    )
  ] .

api:attributes a hydra:Link ;
  rdfs:range api:AttributeCollection ;
  hydra:supportedOperation
    api:AddAttributeMappedFromSingleColumn ,
    api:GetTableAttributes .

dataCube:source a hydra:Link ;
  rdfs:range dataCube:Source .

api:GetTable
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:returns dataCube:Table ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/express#getRequestedId>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/table/get.rq>
      ]
    )
  ] .

api:GetFactTable
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:returns dataCube:Table ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project#getFactTable>
      ]
    )
  ] .

api:CreateFactTable
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "PUT" ;
  hydra:title "Create a Fact Table" ;
  hydra:expects dataCube:FactTable ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table#createFactTable>
      ]
    )
  ] .

api:PostFactTable
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "POST" ;
  hydra:title "Create a Fact Table" ;
  hydra:expects dataCube:FactTable ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table#createTable>
      ]
    )
  ] .

api:CreateDimensionTable
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "POST" ;
  hydra:title "Create a Dimension Table" ;
  hydra:expects dataCube:DimensionTable ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table#createTable>
      ]
    )
  ] .

## /End Table

## api:TableCollection

api:TableCollection a hydra:Class .

api:GetTables
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/project#getTables>
      ]
    )
  ] .

## /end api:TableCollection

## dataCube:Attribute

dataCube:Attribute a hydra:Class ;
  hydra:supportedOperation
    api:GetAttribute ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Name for this attribute";
      hydra:required true
    ] ,
    [
      hydra:property rdf:predicate ;
      hydra:title "Predicate URI for mapped value" ;
      hydra:required true
    ] ,
    [
      hydra:property dataCube:table ;
      hydra:title "Table containing this attribute" ;
      hydra:writeable false
    ] .

dataCube:ColumnAttribute rdfs:subclassOf dataCube:Attribute ;
  hydra:supportedProperty
  [
    hydra:property dataCube:column ;
    hydra:title "Column to be transformed by this attribute" ;
    hydra:required true
  ] ,
  [
    hydra:property rdf:type ;
    hydra:title "Datatype URI for mapped value" ;
    hydra:description "Cannot be used together with language tag"
  ] ,
  [
    hydra:property dataCube:language ;
    hydra:title "Language of the mapped values" ;
    hydra:description "Cannot be used together with datatype"
  ] .

api:AddAttributeMappedFromSingleColumn
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "POST" ;
  hydra:title "Creates a table attribute from column" ;
  hydra:description "Such an attribute will always map a single value into a literal" ;
  hydra:expects dataCube:ColumnAttribute ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table#addAttributeHandler>
      ]
    )
  ] .

api:GetAttribute
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Retrieves a table's attribute" ;
  hydra:returns dataCube:Attribute ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/attribute#getHandler>
      ]
    )
  ] .

dataCube:column a hydra:Link .
dataCube:table a hydra:Link .

## /End dataCube:Attribute

## api:AttributeCollection

api:AttributeCollection a hydra:Class .

api:GetTableAttributes
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/data-cube/table#getAttributes>
      ]
    )
  ] .

## /End api:AttributeCollection

## Errors

api:Error
  a hydra:Class ;
  hydra:supportedProperty
    [
      hydra:property dataCube:project ;
      hydra:title "Project"
    ] .

## /End Errors

## Express hooks

<> a api:Entrypoint .
<projects> a api:Projects .

</project/:projectId> a dataCube:Project .
</_project/:projectId> a api:ProjectPlaceholder .
</_project/:projectId> api:project </project/:projectId> .
</project/:projectId/sources> a api:Sources .
</project/:projectId> dataCube:factTable </project/:projectId/fact-table> .
</project/:projectId> api:tables </project/:projectId/tables> .
</project/:projectId/fact-table> a dataCube:FactTable .
</project/:projectId/table/:tableName> a dataCube:Table .
</project/:projectId/table/:tableName/attribute/:attributeName> a dataCube:Attribute .
</project/:projectId/table/:tableName> api:attributes </project/:projectId/table/:tableName/attributes> .
</project/:projectId/table/:tableName> api:preview </project/:projectId/table/:tableName/preview> .
</project/:projectId/source/:sourceId> a dataCube:Source .
</project/:projectId/source/:sourceId> api:sample </project/:projectId/source-sample/:sourceId> .
</project/:projectId/table/:tableName> api:csvwMetadata </project/:projectId/table/:tableName/csvw> .
