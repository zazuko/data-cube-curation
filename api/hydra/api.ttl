# TODO: get rid of base and provide from env variables
@base <http://localhost:5678/> .

@prefix api: <https://rdf-cube-curation.described.at/api/> .
@prefix dataCube: <https://rdf-cube-curation.described.at/> .
@prefix hydra: <http://www.w3.org/ns/hydra/core#> .
@prefix code: <https://code.described.at/> .
@prefix hydra-box: <http://hydra-box.org/schema/> .
@prefix schema: <http://schema.org/> .
@prefix api-project: <https://rdf-cube-curation.described.at/DataCubeProject/> .
@prefix api-source: <https://rdf-cube-curation.described.at/DataCubeSource/> .
@prefix api-column: <https://rdf-cube-curation.described.at/DataCubeSourceColumn/> .

## Entrypoint

<api> a hydra:ApiDocumentation ;
  hydra:entrypoint <> ;
  hydra:supportedClass
    api:Entrypoint ,
    api:Projects ,
    dataCube:Project ,
    dataCube:Source ,
    api:Sources ,
    dataCube:Column ,
    api-source:CsvwMetadata .

api:Entrypoint a hydra:Class ;
  hydra:title "The root of the API" ;
  hydra:supportedOperation api:EntrypointGetOperation ;
  hydra:supportedProperty
    [
      hydra:property api:projects ;
      hydra:title "Projects" ;
      hydra:readable true ;
      hydra:writeable false
    ].

api:EntrypointGetOperation
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:title "Get the entrypoint resource" ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source
      <file:hydra/entrypoint/get.sparql>
  ] .

api:projects a hydra:Link .

## End Entrypoint

## Projects

api:Projects a hydra:Class ;
  hydra:title "Data Cube Projects" ;
  hydra:supportedOperation
    api:CreateProject ,
    api:GetDataCubeProjects .

api:GetDataCubeProjects
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get all projects" ;
  code:implementedBy [
    a hydra-box:SparqlQuery ;
    hydra-box:source <file:hydra/projects/get.rq>, <file:hydra/projects/get.manages-block.rq>
  ] .

api:CreateProject
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:title "Design an RDF data cube" ;
  hydra:method "POST" ;
  hydra:returns dataCube:Project ;
  hydra:expects dataCube:Project ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project#initNew>
      ]
      [
        a hydra-box:SparqlUpdate ;
        hydra-box:source <file:hydra/project/create.ru>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project/create#setResponse>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project/get.rq>
      ]
    )
  ] ;
  hydra-box:variables
  [
    hydra:mapping
    [
      a hydra:IriTemplateMapping ;
      hydra:property schema:name ;
      hydra:variable "projectName"
    ]
  ] .

## /End Projects

## Project

dataCube:Project
  a hydra:Class ;
  hydra:title "A data cube mapping project" ;
  hydra:supportedOperation
    api:GetDataCubeProject ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Project name" ;
      hydra:readable true ;
      hydra:writeable true
    ] ,
    [
      hydra:property api:sources ;
      hydra:title "Data cube sources" ;
      hydra:writeable false
    ] .

api:sources
  a hydra:Link ;
  hydra:supportedOperation api:AddSource .

api:GetDataCubeProject
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get a project" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project#initExisting>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project/get.rq>
      ]
    )
  ] .

api:AddSource
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "POST" ;
  hydra:title "Create a data cube source" ;
  hydra:returns dataCube:Project ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source#initNew>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source/create#processCsv>
      ]
      [
        a hydra-box:SparqlUpdate ;
        hydra-box:source <file:hydra/project-source/create.ru>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source/create#setResponse>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source/get.rq>, <file:hydra/project-source/get.columns.rq>
      ]
    )
  ] .

api:GetProjectSources
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get the data cube source" ;
  hydra:returns api:Sources ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project#initExisting>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source-collection/get.rq>, <file:hydra/project-source-collection/get.manages-block.rq>
      ]
    )
  ] .

## /End Project

## DataCubeSource

api:Sources
  a hydra:Class ;
  hydra:supportedOperation
    api:GetProjectSources ,
    api:AddSource .

dataCube:Source
  a hydra:Class ;
  hydra:supportedOperation
    api:GetDataCubeSource ;
  hydra:supportedProperty
    [
      hydra:property schema:name ;
      hydra:title "Name" ;
      hydra:readable true ;
      hydra:writeable true
    ] ,
    [
      hydra:property api-source:columns ;
      hydra:title "Columns" ;
      hydra:writeable false
    ] ,
    [
      hydra:property dataCube:project ;
      hydra:title "Project" ;
      hydra:description "The project this source belongs to" ;
      hydra:writeable false
    ] .

dataCube:project a hydra:Link .
api-source:csvwMetadata a hydra:Link .

api:GetDataCubeSource
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  hydra:title "Get project source" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source#initExisting>
      ]
      [
        a hydra-box:SparqlQuery ;
        hydra-box:source <file:hydra/project-source/get.rq>, <file:hydra/project-source/get.columns.rq>
      ]
    )
  ] .

api-source:CsvwMetadata
  a hydra:Class ;
  hydra:supportedOperation
    api-source:GetCsvwMetadata .

api-source:GetCsvwMetadata
  a hydra:SupportedOperation, hydra-box:View ;
  hydra:method "GET" ;
  code:implementedBy [
    a hydra-box:middlewareChain ;
    code:arguments (
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source#initExisting>
      ]
      [
        a code:EcmaScript ;
        code:link <file:lib/project-source/csvw#projectMappings>
      ]
    )
  ] .

## /End DataCubeSource

## Column

api:DataCubeSourceColumn
  a hydra:Class ;
  hydra:title "Source column" ;
  hydra:supportedProperty
    [
      hydra:property api-column:title ;
      hydra:title "Column heading"
    ] ,
    [
      hydra:property api-column:mapped ;
      hydra:title "Mapped" ;
      hydra:description "Indicates that the column is used in a dimension or measure."
    ].

## /End Column

## Express hooks

<> a api:Entrypoint .
<projects> a api:Projects .

</project/:projectId> a dataCube:Project .
</project/:projectId/sources> a api:Sources .
</project/:projectId/source/:sourceId> a api:DataCubeSource .
</project/:projectId/source/:sourceId/csvw> a api-source:CsvwMetadata .
